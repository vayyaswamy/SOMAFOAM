/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs (
      "libfoam.so"
      "liblduSolvers.so"
      "libplasmaCookBook.so"
     );

application     plasmaSimFoam;

startFrom       startTime;

startTime       0;

endTime         1e-5;

stopAt          endTime;

deltaT          1E-10;

MaxCo           10.0;

deltaTMax	1e-10 ;

deltaTMin	1e-10;

writeControl    runTime;

writeInterval   1E-7;

purgeWrite      0;

writeFormat     ascii;

writePrecision  15;

writeCompression uncompressed;

timeFormat      general;

timePrecision   8;

runTimeModifiable yes;

restartCapable on;

OptimisationSwitches
{
    commsType       nonBlocking;
}

DebugSwitches
{
    dimensionSet    0;
	solution  0;
    lduMatrix 0;
    blockLduMatrix 0;
}

Tolerances
{
    // Primitive mesh checking limits
    primitiveMeshClosedThreshold     1e-8;
    // Geometric matching tolerances
    patchFaceMatchTol   1e-8;
    // Intersection tolerance
    intersectionPlanarTol      0.2;
    intersectionMissTol        1e-10;
    GGIAreaErrorTol                 1e-8;
}


functions
{

	dumpObjects
	{
		type            writeRegisteredObject;
		functionObjectLibs ("libIOFunctionObjects.so");
		outputControl   outputTime;
		objectNames    ("E" "Sy_electron" "J_electron" "J_Arp1");
	}

//	boundTemperature
//	{
//		type boundField;
//		functionObjectLibs ("libsampling.so");
//		name Te;
//		minValue	300.0;
//		maxValue	1000000.0;
//	}

    fieldAverage1
    {
        type            fieldAverage;
        functionObjectLibs ( "libfieldFunctionObjects.so" );
        enabled         true;
        cleanRestart        true;
        outputControl   timeStep;
        outputControl   outputTime;
/*        outputInterval  100000;*/
        fields
        (
            Te
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            N_electron
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            Phi
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }
        );
    }
}

// ************************************************************************* //
